@*@page "/login"*@
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService
@inject IToastService ToastService
@*@if (isAuthenticated)
    {
        <h3>welcome @user.UserName</h3>
    }
    else
    {*@
<style>
    input:focus {
        outline: none !important;
    }

    .valid.modified:not([type=checkbox]) {
        outline: none #26b050;
    }

    .valid.modified:not([type=text]) {
        outline: none #26b050;
    }
</style>



<h3>Please Log-in below or <a href="/register"> register</a> For a new account.</h3>
<hr />
<EditForm Model="user" OnValidSubmit="Handlelogin">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label for="email">
            Email
        </label>
        <InputText id="email" @bind-Value="user.Email" class="" type="email"></InputText>

    </div>
    <div class="form-group">
        <label for="password">
            Password
        </label>
        <InputText id="password" @bind-Value="user.Password" class="" type="password"></InputText>

    </div>
    <hr />
    <ValidationSummary><hr /></ValidationSummary>


    <button type="submit" class="btn btn-info "> Login</button>

</EditForm>

@*}*@


@code {
    bool isAuthenticated = false;
    private LoginModel user = new LoginModel();

    private async void Handlelogin()
    {
        // user.UserName =

        //Console.WriteLine($"USER NAME :{user.UserName} , password:  {user.Password}");

        //isAuthenticated = true;

        var result = await AuthService.Login(user);
        if (result.Success)
        {
            ToastService.ShowSuccess("welcome");

            //ToastService.ShowSuccess(result.Message);
            //await LocalStorage.SetItemAsync<bool>("isAuthenticated", true);

            await LocalStorage.SetItemAsync<string>("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
        }
        else
        {
            ToastService.ShowError(result.Message);
        }

        //await LocalStorage.SetItemAsync<bool>("isAuthenticated", true);
        //await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

}
