@page "/register"
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IToastService toastService
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@layout EmptyLayout
@inject ProtectedLocalStorage BrowserStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage


<!-- Compiled and minified CSS -->
@*<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.0/css/materialize.min.css">*@

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Noto+Sans&display=swap');

    :root {
        --black: #404040;
        --magenta: #FF00A8;
        --shadow_norm: 0 5px 10px 0 rgba(0,0,0,.15),0 10px 20px 0 rgba(0,0,0,.10);
        --shadow_hover: 0 5px 10px 0 rgba(0,0,0,.20),0 10px 20px 0 rgba(0,0,0,.10);
    }

    body {
        color: var(--black);
        text-align: center;
        font-family: 'Noto Sans', sans-serif;
    }

    div {
        margin-left: auto;
        margin-right: auto;
    }

    .backbox {
        width: 600px;
        background-color: white;
        margin-left: auto;
        margin-right: auto;
        margin-top: 20px;
        margin-bottom: 5%;
    }

    .tittle {
        font-size: 50px;
        margin-bottom: 0px;
    }

    hr {
        width: 500px;
        background-color: #1047d8;
        padding: 1px;
        border-radius: 3px;
        border: none;
    }

    input {
        width: 250px;
        margin-top: 10px;
        padding: 12px 20px;
        box-sizing: border-box;
        box-shadow: var(--shadow_norm);
        border: none;
        margin-bottom: 15px;
        border-radius: 8px;
    }

        input:hover {
            box-shadow: var(--shadow_hover);
        }

        input:focus {
            box-shadow: var(--shadow_hover);
            outline: none;
            width: 230px;
        }

    button {
        width: 400px;
        margin-top: 10px;
        padding: 12px 20px;
        box-sizing: border-box;
        box-shadow: var(--shadow_norm);
        background-color: var(--magenta);
        border: none;
        margin-bottom: 5px;
        border-radius: 8px;
        font-weight: bold;
        color: white;
    }

        button:hover {
            box-shadow: var(--shadow_hover);
            cursor: pointer;
        }

    a {
        font-size: 15px;
        text-decoration: none;
        color: var(--magenta);
        display: block;
        margin-top: 5px;
    }

        a:hover {
            text-decoration: underline;
            cursor: pointer;
        }
</style>


<style>
    input:focus {
        outline: none !important;
    }

    .valid.modified:not([type=checkbox]) {
        outline: none #26b050;
    }

    .valid.modified:not([type=text]) {
        outline: none #26b050;
    }
</style>

<h3>Create New Account</h3>
<hr />


<EditForm Model="User" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    @*<ValidationSummary> <hr /></ValidationSummary>*@
    <div>
        <h1 class="tittle"> <span style="color:blue;font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif"> VIE</span> -Capital</h1>
        <hr />
    </div>
    <div class="backbox">
        @*<input type="text" placeholder="Username" />
            <input type="password" placeholder="Password" />*@
        <div class="container">

            <div class="form-group input-field">

                <InputText placeholder="FirstName" id="first_name" type="text" class="validate" @bind-Value="User.FristName" style="width:450px">

                </InputText>
                <ValidationMessage For="()=>User.FristName"></ValidationMessage>
            </div>

            <div class="form-group input-field">
                <InputText placeholder="LastName" type="text" class="validate" @bind-Value="User.LastName" style="width:450px">

                </InputText>

                <ValidationMessage For="()=>User.LastName"></ValidationMessage>

            </div>









            <div class="form-group input-field">

                <InputText placeholder="Email" type="email" class="validate" id="email" @bind-Value="User.Email" style="width:450px">

                </InputText>
                <ValidationMessage For="()=>User.Email"></ValidationMessage>

            </div>
            <div class="form-group input-field">

                <InputText placeholder="Password" id="Password" type="password" @bind-Value="User.Password" style="width:450px">

                </InputText>
            </div>
            <ValidationMessage For="()=>User.Password"></ValidationMessage>


            <div class="form-group input-field">

                <InputText placeholder="Confirm Password" type="password" id="ConfirmPassword" @bind-Value="User.ConfirmPassword" style="width:450px">

                </InputText>
                <ValidationMessage For="()=>User.ConfirmPassword"></ValidationMessage>
            </div>
            <label for="dateOfBrith">Date Of Brith</label>
            <div class="form-group">

                <InputDate placeholder="  DateOfBrith" id="dateOfBrith" @bind-Value="User.DateOfBrith" style="width:450px">

                </InputDate>
                <ValidationMessage For="()=>User.DateOfBrith"></ValidationMessage>
            </div>




            @*<p>
                    <label>
                        <InputCheckbox id="Confirmed" type="checkbox" @bind-Value="User.IsConfirmed" style="border: none; width: 50px; box-sizing:initial;border-radius:0">

                        </InputCheckbox>

                        <ValidationMessage For="()=>User.IsConfirmed"></ValidationMessage>
                        <span>Confirmed</span>
                    </label>
                </p>*@




        </div>
        @*<button class="btn btn-lg btn-info" type="submit">
                Register
            </button>*@

        <button type="submit" class="btn btn-primary btn-lg" disabled=@IsTaskRunning> @ButtonName</button>


    </div>


    <br />

</EditForm>
<br />






@code {





    IJSObjectReference JSObjectReference { set; get; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {


        //  JSObjectReference = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Register/BootStrap.js");
        //  JSObjectReference = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Register/BootStrap.js");
        //   JSObjectReference = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Register/JQuery.js");
        JSObjectReference = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Register/Register.js");


    }

    UserRegister User = new UserRegister();


    bool IsTaskRunning = false;
    string ButtonName = "Register";



    Task OnButtonClick()
    {
        //here user can perform buton click function
        return Task.Delay(10000);
    }



    async void HandleRegistration()
    {

        IsTaskRunning = true;
        ButtonName = "loading......";

        await OnButtonClick();



        // await OnButtonClick();


        //Console.WriteLine($"STORE THIS New user In the database . {User.UserName}");

        var result = await AuthService.Register(User);


        if (result.Success)
        {

            toastService.ShowSuccess(result.Message);
           await LocalStorage.SetItemAsync("id", result.Data);
            //await JSRuntime.InvokeVoidAsync("localStorage.setItem", "id", result.Data);
            //await LocalStorage.SetItemAsync<int>("id", result.Data);
            //  var name = await LocalStorage.GetItemAsync<int>("id");
            //await BrowserStorage.SetAsync("id", result.Data);

        //    await sessionStorage.SetItemAsync("uId",result.Data);
         //   var name = await sessionStorage.GetItemAsync<int>("uId");


            NavigationManager.NavigateTo("/Account");


        }
        else
        {
            IsTaskRunning = false;
            ButtonName = "Register";
            await OnButtonClick();


            toastService.ShowError(result.Message);

        }


        IsTaskRunning = false;
        StateHasChanged();


        //  NavigationManager.NavigateTo("LOGIN");

    }












}
